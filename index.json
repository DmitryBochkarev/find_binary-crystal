{"repository_name":"find_binary","body":"# find_binary [![GitHub release](https://img.shields.io/github/release/DmitryBochkarev/find_binary-crystal.svg)](https://github.com/DmitryBochkarev/find_binary-crystal/releases) [![Build Status](https://travis-ci.org/DmitryBochkarev/find_binary-crystal.svg?branch=master)](https://travis-ci.org/DmitryBochkarev/find_binary-crystal)\n\n[docs](https://dmitrybochkarev.github.io/find_binary-crystal/FindBinary.html)\n\nSimple library that helps to find path to a executable.\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  find_binary:\n    github: DmitryBochkarev/find_binary-crystal\n```\n\n## Usage\n\n```crystal\nrequire \"find_binary\"\n\ncrystal = FindBinary.find(\"crystal\")\nif crystal.nil?\n  puts \"crystal not found\"\nelse\n  puts \"crystal found: #{crystal}\"\n  puts `#{crystal} -v`\nend\n```\n\n### Custom paths\n\nYou can provide an additional paths for the search.\n\n```crystal\nbuild_in_binary = File.join(Dir.current, \"vendor/ag\")\nfind_the_silver_searcher = FindBinary.new(\"ag\")\nfind_the_silver_searcher.append_path(build_in_binary)\nsilver_searcher = find_the_silver_searcher.find\n\nputs \"ag found: #{silver_searcher}\"\nputs `#{silver_searcher.not_nil!} --version`\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/DmitryBochkarev/find_binary-crystal/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Dmitry Bochkarev](https://github.com/DmitryBochkarev) - creator, maintainer\n","program":{"html_id":"find_binary/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"find_binary","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"find_binary/FindBinary","path":"FindBinary.html","kind":"class","full_name":"FindBinary","name":"FindBinary","abstract":false,"superclass":{"html_id":"find_binary/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"find_binary/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"find_binary/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/find_binary.cr","line_number":26,"url":"https://github.com/DmitryBochkarev/find_binary-crystal/blob/85160bc1d06e9b3bff1a865c9527fdfe1c454ca0/src/find_binary.cr#L26"},{"filename":"src/find_binary/version.cr","line_number":1,"url":"https://github.com/DmitryBochkarev/find_binary-crystal/blob/85160bc1d06e9b3bff1a865c9527fdfe1c454ca0/src/find_binary/version.cr#L1"}],"repository_name":"find_binary","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`FindBinary` finds a binary in a system path or a path provided.\n\nFind crystal binary in a system path.\n```\nFindBinary.find(\"crystal\") # => /usr/bin/crystal\n```\n\nAlternatively, you can provide paths in which binary should be\nsearched instead of a system path.\n```\nbuild_in_binary = File.join(Dir.current, \"vendor/ag\")\nfind_the_silver_searcher = FindBinary.new(\"ag\", [build_in_binary])\nsilver_searcher = find_the_silver_searcher.find # => ./vender/ag\n```\n\nOr, if you vendor a binary, and want to use this as a fallback,\nyou can append a vendor path.\n```\nbuild_in_binary = File.join(Dir.current, \"vendor/ag\")\nfind_the_silver_searcher = FindBinary.new(\"ag\")\nfind_the_silver_searcher.append_path(build_in_binary)\nsilver_searcher = find_the_silver_searcher.find # => /usr/bin/ag\n```","summary":"<p><code><a href=\"FindBinary.html\">FindBinary</a></code> finds a binary in a system path or a path provided.</p>","class_methods":[{"id":"find(bin:String):String?-class-method","html_id":"find(bin:String):String?-class-method","name":"find","doc":"Finds a *bin* in a system path.\n\nUsing the \"PATH\" environment variable, to determines where to search.\n```\nFindBinary.find(\"crystal\") # => /usr/bin/crystal\n```","summary":"<p>Finds a <em>bin</em> in a system path.</p>","abstract":false,"args":[{"name":"bin","doc":null,"default_value":"","external_name":"bin","restriction":"String"}],"args_string":"(bin : String) : String?","args_html":"(bin : String) : String?","location":{"filename":"src/find_binary.cr","line_number":38,"url":"https://github.com/DmitryBochkarev/find_binary-crystal/blob/85160bc1d06e9b3bff1a865c9527fdfe1c454ca0/src/find_binary.cr#L38"},"def":{"name":"find","args":[{"name":"bin","doc":null,"default_value":"","external_name":"bin","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"(new(bin)).find"}}],"constructors":[{"id":"new(bin,paths:Array(String)?=nil)-class-method","html_id":"new(bin,paths:Array(String)?=nil)-class-method","name":"new","doc":"Creates a new finder for the *bin*, allowing to override the search *paths*.\n\n```\nbuild_in_binary = File.join(Dir.current, \"vendor/ag\")\nfind_the_silver_searcher = FindBinary.new(\"ag\", [build_in_binary])\n```","summary":"<p>Creates a new finder for the <em>bin</em>, allowing to override the search <em>paths</em>.</p>","abstract":false,"args":[{"name":"bin","doc":null,"default_value":"","external_name":"bin","restriction":""},{"name":"paths","doc":null,"default_value":"nil","external_name":"paths","restriction":"Array(String) | ::Nil"}],"args_string":"(bin, paths : Array(String)? = <span class=\"n\">nil</span>)","args_html":"(bin, paths : Array(String)? = <span class=\"n\">nil</span>)","location":{"filename":"src/find_binary.cr","line_number":48,"url":"https://github.com/DmitryBochkarev/find_binary-crystal/blob/85160bc1d06e9b3bff1a865c9527fdfe1c454ca0/src/find_binary.cr#L48"},"def":{"name":"new","args":[{"name":"bin","doc":null,"default_value":"","external_name":"bin","restriction":""},{"name":"paths","doc":null,"default_value":"nil","external_name":"paths","restriction":"Array(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bin, paths)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"append_path(*paths)-instance-method","html_id":"append_path(*paths)-instance-method","name":"append_path","doc":"Append *paths* to the end of a search path.","summary":"<p>Append <em>paths</em> to the end of a search path.</p>","abstract":false,"args":[{"name":"paths","doc":null,"default_value":"","external_name":"paths","restriction":""}],"args_string":"(*paths)","args_html":"(*paths)","location":{"filename":"src/find_binary.cr","line_number":68,"url":"https://github.com/DmitryBochkarev/find_binary-crystal/blob/85160bc1d06e9b3bff1a865c9527fdfe1c454ca0/src/find_binary.cr#L68"},"def":{"name":"append_path","args":[{"name":"paths","doc":null,"default_value":"","external_name":"paths","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@paths.push(*paths)"}},{"id":"find:String?-instance-method","html_id":"find:String?-instance-method","name":"find","doc":"Find the binary in a search path.","summary":"<p>Find the binary in a search path.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/find_binary.cr","line_number":57,"url":"https://github.com/DmitryBochkarev/find_binary-crystal/blob/85160bc1d06e9b3bff1a865c9527fdfe1c454ca0/src/find_binary.cr#L57"},"def":{"name":"find","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@paths.each do |path|\n  full_path = File.join(path, @bin)\n  exe = (Dir.glob(full_path)).find do |f|\n    File.executable?(f)\n  end\n  if exe\n    return exe\n  end\nend\nnil\n"}},{"id":"prepend_path(*paths)-instance-method","html_id":"prepend_path(*paths)-instance-method","name":"prepend_path","doc":"Prepend *paths* to the head of a search path.","summary":"<p>Prepend <em>paths</em> to the head of a search path.</p>","abstract":false,"args":[{"name":"paths","doc":null,"default_value":"","external_name":"paths","restriction":""}],"args_string":"(*paths)","args_html":"(*paths)","location":{"filename":"src/find_binary.cr","line_number":73,"url":"https://github.com/DmitryBochkarev/find_binary-crystal/blob/85160bc1d06e9b3bff1a865c9527fdfe1c454ca0/src/find_binary.cr#L73"},"def":{"name":"prepend_path","args":[{"name":"paths","doc":null,"default_value":"","external_name":"paths","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@paths.unshift(*paths)"}}],"macros":[],"types":[]}]}}